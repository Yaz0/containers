set nocompatible
filetype plugin on
filetype indent on
syntax on
set number
set relativenumber
set mouse=a
set nobackup
set nowb
set noswapfile
set nofoldenable
set showtabline=2
set cursorline
autocmd WinEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorline
set clipboard=unnamedplus
set ignorecase
set smartcase
set incsearch
set hlsearch
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>
set wildmenu
nnoremap d "_d
vnoremap d "_d
nnoremap D "_D
vnoremap D "_D
xnoremap <expr> p 'pgv"'.v:register.'y'
map <C-Left> <C-w>h
map <C-Down> <C-w>j
map <C-Up> <C-w>k
map <C-Right> <C-w>l
map <S-Right> :tabn<CR>
map <S-Left>  :tabp<CR>
set backspace=indent,eol,start
set noexpandtab
set copyindent
set preserveindent
set softtabstop=0
set shiftwidth=4
set tabstop=4
set belloff=all
set updatetime=100

call plug#begin('~/.vim/plugged')
Plug 'sjl/badwolf'
Plug 'itchyny/lightline.vim'
Plug 'majutsushi/tagbar'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'bronson/vim-trailing-whitespace'
Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/nerdcommenter'
Plug 'dyng/ctrlsf.vim'
Plug 'easymotion/vim-easymotion'
Plug 'scrooloose/nerdtree'
Plug 'davidegx/ctrlp-smarttabs'
Plug 'ervandew/supertab'
Plug 'scrooloose/syntastic'
Plug 'kshenoy/vim-signature'
call plug#end()

set laststatus=2
nmap <F8> :TagbarToggle<CR>
silent! colorscheme badwolf
let g:ctrlp_map = '<c-p>p'
let g:ctrlp_cmd = 'CtrlPLastMode'
let g:ctrlp_extensions = ['line', 'dir', 'smarttabs']
let g:ctrlp_show_hidden = 1
let g:ctrlp_user_command = 'ag %s -l --nocolor -f -g ""'
set signcolumn=yes
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-F>t :CtrlSFToggle<CR>
inoremap <C-F>t <Esc>:CtrlSFToggle<CR>
nmap     <C-F>l <Plug>CtrlSFQuickfixPrompt
vmap     <C-F>l <Plug>CtrlSFQuickfixVwordPath
vmap     <C-F>L <Plug>CtrlSFQuickfixVwordExec
let g:ctrlsf_auto_close = 0
let g:ctrlsf_case_sensitive = 'smart'
let g:ctrlsf_context = '-B 0 -A 0'
let g:ctrlsf_default_root = 'cwd'
let g:ctrlsf_position = 'bottom'
let g:ctrlsf_winsize = '20%'
nnoremap ,c :call NERDComment(0,"toggle")<CR>
vnoremap ,c :call NERDComment(0,"toggle")<CR>
let g:EasyMotion_off_screen_search = 0
let g:EasyMotion_verbose = 0
map <F7> :NERDTreeToggle<CR>
nnoremap <silent><F3> :NERDTreeFind<CR>
set cscopequickfix=s-,c-,d-,i-,t-,e-
if filereadable("cscope.out")
	cs add cscope.out
endif
set cscopetag cscopeverbose
nmap <C-@><C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@><C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_check_on_open = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
